import{_ as l,o as i,c as e,O as a}from"./chunks/framework.6d2956c6.js";const p=JSON.parse('{"title":"你不懂JS: 异步与性能","description":"","frontmatter":{},"headers":[],"relativePath":"async&performance/toc.md","filePath":"async&performance/toc.md"}'),r={name:"async&performance/toc.md"},o=a('<h1 id="你不懂js-异步与性能" tabindex="-1">你不懂JS: 异步与性能 <a class="header-anchor" href="#你不懂js-异步与性能" aria-label="Permalink to &quot;你不懂JS: 异步与性能&quot;">​</a></h1><h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">​</a></h2><ul><li>序</li><li>前言</li><li>第一章: 异步:现在与稍后 <ul><li>块儿（Chunks）中的程序</li><li>事件轮询（Event Loop）</li><li>并行线程</li><li>并发</li><li>Jobs</li><li>语句排序</li></ul></li><li>第二章: 回调 <ul><li>延续</li><li>顺序的大脑</li><li>信任问题</li><li>尝试拯救回调</li></ul></li><li>第三章: Promise <ul><li>什么是 Promise？</li><li>Thenable 鸭子类型（Duck Typing）</li><li>Promise的信任</li><li>链式流程</li><li>错误处理</li><li>Promise 模式</li><li>Promise API概览</li><li>Promise 的限制</li></ul></li><li>第四章: Generator <ul><li>打破运行至完成</li><li>生成值</li><li>异步地迭代 Generator</li><li>Generators + Promises</li><li>Generator 委托</li><li>Generator 并发</li><li>Thunks</li><li>前ES6时代的 Generator</li></ul></li><li>第五章: 程序性能 <ul><li>Web Workers</li><li>SIMD</li><li>asm.js</li></ul></li><li>第六章: 基准分析与调优 <ul><li>基准分析（Benchmarking）</li><li>上下文为王</li><li>jsPerf.com</li><li>编写好的测试</li><li>微观性能</li><li>尾部调用优化 (TCO)</li></ul></li><li>附录A：库：asynquence</li><li>附录B：高级异步模式</li><li>附录C：鸣谢</li></ul>',3),t=[o];function s(n,c,u,_,m,h){return i(),e("div",null,t)}const P=l(r,[["render",s]]);export{p as __pageData,P as default};
