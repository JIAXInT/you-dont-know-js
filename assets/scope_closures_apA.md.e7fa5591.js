import{_ as s,o as a,c as n,O as o}from"./chunks/framework.6d2956c6.js";const d=JSON.parse('{"title":"附录A：动态作用域","description":"","frontmatter":{},"headers":[],"relativePath":"scope&closures/apA.md","filePath":"scope&closures/apA.md"}'),p={name:"scope&closures/apA.md"},l=o(`<h1 id="附录a-动态作用域" tabindex="-1">附录A：动态作用域 <a class="header-anchor" href="#附录a-动态作用域" aria-label="Permalink to &quot;附录A：动态作用域&quot;">​</a></h1><p>在第二章中，作为与 JavaScript 中（事实上，其他大多数语言也是）作用域的工作方式模型 —— “词法作用域”的对比，我们谈到了“动态作用域”。</p><p>我们将简单地检视动态作用域，来彻底说明这种比较。但更重要的是，对于 JavaScript 中的另一种机制（<code>this</code>）来说动态作用域实际上是它的一个近亲表兄，我们将在本系列的“<em>this与对象原型</em>”中详细讲解这种机制。</p><p>正如我们在第二章中看到的，词法作用域是一组关于 <em>引擎</em> 如何查询变量和它在何处能够找到变量的规则。词法作用域的关键性质是，它是在代码编写时被定义的（假定你不使用 <code>eval()</code> 或 <code>with</code> 作弊的话）。</p><p>动态作用域看起来在暗示，有充分的理由，存在这样一种模型，它的作用域是在运行时被确定的，而不是在编写时静态地确定的。让我们通过代码来说明这样的实际情况：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">( </span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> )</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 2</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">bar</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#82AAFF;">foo</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">bar</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>在 <code>foo()</code> 的词法作用域中指向 <code>a</code> 的 RHS 引用将被解析为全局变量 <code>a</code>，它将导致输出结果为值 <code>2</code>。</p><p>相比之下，动态作用域本身不关心函数和作用域是在哪里和如何被声明的，而是关心 <strong>它们是从何处被调用的</strong>。换句话说，它的作用域链条是基于调用栈的，而不是代码中作用域的嵌套。</p><p>所以，如果 JavaScript 拥有动态作用域，当 <code>foo()</code> 被执行时，<strong>理论上</strong> 下面的代码将得出 <code>3</code> 作为输出结果。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">( </span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> )</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 3  (不是 2!)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">bar</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#82AAFF;">foo</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">bar</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>这怎么可能？因为当 <code>foo()</code> 不能为 <code>a</code> 解析出一个变量引用时，它不会沿着嵌套的（词法）作用域链向上走一层，而是沿着调用栈向上走，以找到 <code>foo()</code> 是 <em>从何处</em> 被调用的。因为 <code>foo()</code> 是从 <code>bar()</code> 中被调用的，它就会在 <code>bar()</code> 的作用域中检查变量，并且在这里找到持有值 <code>3</code> 的 <code>a</code>。</p><p>奇怪吗？此时此刻你可能会这样认为。</p><p>但这可能只是因为你仅在拥有词法作用域的代码中工作过。所以动态作用域看起来陌生。如果你仅使用动态作用域的语言编写过代码，它看起来就是很自然的，而词法作用域将是个怪东西。</p><p>要清楚，JavaScript <strong>实际上没有动态作用域</strong>。它拥有词法作用域。就这么简单。但是 <code>this</code> 机制有些像动态作用域。</p><p>关键的差异：<strong>词法作用域是编写时的，而动态作用域（和 <code>this</code>）是运行时的</strong>。词法作用域关心的是 <em>函数在何处被声明</em>，但是动态作用域关心的是函数 <em>从何处</em> 被调用。</p><p>最后：<code>this</code> 关心的是 <em>函数是如何被调用的</em>，这揭示了 <code>this</code> 机制与动态作用域的想法有多么紧密的关联。要了解更多关于 <code>this</code> 的细节，请阅读 “<em>this与对象原型</em>”。</p>`,16),e=[l];function c(t,r,F,y,A,D){return a(),n("div",null,e)}const C=s(p,[["render",c]]);export{d as __pageData,C as default};
