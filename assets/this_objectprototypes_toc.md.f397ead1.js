import{_ as i,o as l,c as t,O as e}from"./chunks/framework.6d2956c6.js";const m=JSON.parse('{"title":"你不懂JS: this 与对象原型","description":"","frontmatter":{},"headers":[],"relativePath":"this&objectprototypes/toc.md","filePath":"this&objectprototypes/toc.md"}'),o={name:"this&objectprototypes/toc.md"},s=e('<h1 id="你不懂js-this-与对象原型" tabindex="-1">你不懂JS: <em>this</em> 与对象原型 <a class="header-anchor" href="#你不懂js-this-与对象原型" aria-label="Permalink to &quot;你不懂JS: *this* 与对象原型&quot;">​</a></h1><h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">​</a></h2><ul><li>序</li><li>前言</li><li>第一章: <code>this</code> 是什么？ <ul><li>为什么要用 <code>this</code>？</li><li>困惑</li><li>什么是 <code>this</code>？</li></ul></li><li>第二章: <code>this</code> 豁然开朗！ <ul><li>调用点（Call-site）</li><li>仅仅是规则</li><li>一切皆有顺序</li><li>绑定的特例</li><li>词法 <code>this</code></li></ul></li><li>第三章: 对象 <ul><li>语法</li><li>类型</li><li>内容</li><li>迭代</li></ul></li><li>第四章: 混合（淆）“类”的对象 <ul><li>类理论</li><li>类机制</li><li>类继承</li><li>混合（Mixin）</li></ul></li><li>第五章: 原型 <ul><li><code>[[Prototype]]</code></li><li>“类”</li><li>“（原型）继承”</li><li>对象链接</li></ul></li><li>第六章: 行为委托 <ul><li>迈向面向委托的设计</li><li>Classes vs. Objects</li><li>更简单的设计</li><li>更好的语法</li><li>自省</li></ul></li><li>附录A: ES6 <code>class</code></li><li>附录B: 鸣谢</li></ul>',3),a=[s];function c(d,r,h,_,n,u){return l(),t("div",null,a)}const f=i(o,[["render",c]]);export{m as __pageData,f as default};
